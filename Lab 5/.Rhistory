dist_from_edge_6m <- subset(sub_plant_data, dist_from_edge_m == "6.0m")
t.test(dist_from_edge_0m$num_leaves_in_rosette, dist_from_edge_6m$num_leaves_in_rosette, var.equal = FALSE) # p-valu
wilcox.test(num_leaves_in_rosette~dist_from_edge_m, data = sub_plant_data)
knitr::opts_chunk$set(echo = TRUE)
library(dbplyr)
library(ggplot2)
library(car)
library(tidyverse)
library(readr)
#Notes
#If using transformed data --> state null and alt hyp as transformed data
#2C residual test on non-transformed data and 2D residual test on transformed data
#2C run linear model on non-transformed and pull out residual and check non-transformed data. Transform data, pull out residual, and check transformed data's residual for normality
#log+1 only for if 0 is in data
#normality tests --> histogram, boxplot, qqplot, shapiro, clt, residuals
#first assumption is normality, second assumption is equal variances
#
wilcox.test(num_leaves_in_rosette~dist_from_edge_m, data = sub_plant_data)
# null hyp: same shape
# alt hyp: not the same shape of distribution
cricket_data <- read.csv("~/EEMB 146 Lab Files/Lab 5 Data/starving_cricket.csv")
View(cricket_data)
# levene test for plant data
leveneTest(sub_plant_data$log_num_leaves_in_rosette, sub_plant_data$dist_from_edge_m) #p-value = 0.01568
# two sample t-test
dist_from_edge_0m <- subset(sub_plant_data, dist_from_edge_m == "0.0m")
dist_from_edge_6m <- subset(sub_plant_data, dist_from_edge_m == "6.0m")
t.test(dist_from_edge_0m$log_num_leaves_in_rosette, dist_from_edge_6m$log_num_leaves_in_rosette, var.equal = TRUE) # p-value = 0.0062
# null = there is no difference in number of dandelion leaves per rosette between dandelion 0m from habitat edge and 6m from habitat edge
# alt = there is a difference
#loading in cricket data
cricket_data <- read.csv("~/EEMB 146 Lab Files/Lab 5 Data/starving_cricket.csv")
# visualizing data --histogram
ggplot(cricket_data, aes(x = time_to_mating)) +
geom_histogram() +
facet_wrap(~ feeding) +  #separates histogram based on a certain grouping
theme_light() +
stat_bin(bins = 30) +
labs(x = "Waiting Time to Mating (mins)", y = "Count") +
ggtitle("Histogram of Waiting Time to Mating in Fed and Starved Crickets")
#boxplot
ggplot(sub_plant_data, aes(x = feeding, y = time_to_mating)) +
geom_boxplot(fill = "lightblue") +
theme_classic() +
labs(x = "Feeding", y = "Waiting Time to Mating (mins)") +
ggtitle("Boxplot of Waiting Time to Mating ")
#loading in cricket data
cricket_data <- read.csv("~/EEMB 146 Lab Files/Lab 5 Data/starving_cricket.csv")
# visualizing data --histogram
ggplot(cricket_data, aes(x = time_to_mating)) +
geom_histogram() +
facet_wrap(~ feeding) +  #separates histogram based on a certain grouping
theme_light() +
stat_bin(bins = 20) +
labs(x = "Waiting Time to Mating (mins)", y = "Count") +
ggtitle("Histogram of Waiting Time to Mating in Fed and Starved Crickets")
#boxplot
ggplot(sub_plant_data, aes(x = feeding, y = time_to_mating)) +
geom_boxplot(fill = "lightblue") +
theme_classic() +
labs(x = "Feeding", y = "Waiting Time to Mating (mins)") +
ggtitle("Boxplot of Waiting Time to Mating ")
#loading in cricket data
cricket_data <- read.csv("~/EEMB 146 Lab Files/Lab 5 Data/starving_cricket.csv")
# visualizing data --histogram
ggplot(cricket_data, aes(x = time_to_mating)) +
geom_histogram() +
facet_wrap(~ feeding) +  #separates histogram based on a certain grouping
theme_light() +
stat_bin(bins = 10) +
labs(x = "Waiting Time to Mating (mins)", y = "Count") +
ggtitle("Histogram of Waiting Time to Mating in Fed and Starved Crickets")
#boxplot
ggplot(sub_plant_data, aes(x = feeding, y = time_to_mating)) +
geom_boxplot(fill = "lightblue") +
theme_classic() +
labs(x = "Feeding", y = "Waiting Time to Mating (mins)") +
ggtitle("Boxplot of Waiting Time to Mating ")
#loading in cricket data
cricket_data <- read.csv("~/EEMB 146 Lab Files/Lab 5 Data/starving_cricket.csv")
# visualizing data --histogram
ggplot(cricket_data, aes(x = time_to_mating)) +
geom_histogram() +
facet_wrap(~ feeding) +  #separates histogram based on a certain grouping
theme_light() +
stat_bin(bins = 15) +
labs(x = "Waiting Time to Mating (mins)", y = "Count") +
ggtitle("Histogram of Waiting Time to Mating in Fed and Starved Crickets")
#boxplot
ggplot(sub_plant_data, aes(x = feeding, y = time_to_mating)) +
geom_boxplot(fill = "lightblue") +
theme_classic() +
labs(x = "Feeding", y = "Waiting Time to Mating (mins)") +
ggtitle("Boxplot of Waiting Time to Mating ")
#loading in cricket data
cricket_data <- read.csv("~/EEMB 146 Lab Files/Lab 5 Data/starving_cricket.csv")
# visualizing data --histogram
ggplot(cricket_data, aes(x = time_to_mating)) +
geom_histogram() +
facet_wrap(~ feeding) +  #separates histogram based on a certain grouping
theme_light() +
stat_bin(bins = 20) +
labs(x = "Waiting Time to Mating (mins)", y = "Count") +
ggtitle("Histogram of Waiting Time to Mating in Fed and Starved Crickets")
#boxplot
ggplot(sub_plant_data, aes(x = feeding, y = time_to_mating)) +
geom_boxplot(fill = "lightblue") +
theme_classic() +
labs(x = "Feeding", y = "Waiting Time to Mating (mins)") +
ggtitle("Boxplot of Waiting Time to Mating ")
#loading in cricket data
cricket_data <- read.csv("~/EEMB 146 Lab Files/Lab 5 Data/starving_cricket.csv")
# visualizing data --histogram
ggplot(cricket_data, aes(x = time_to_mating)) +
geom_histogram() +
facet_wrap(~ feeding) +  #separates histogram based on a certain grouping
theme_light() +
stat_bin(bins = 20) +
labs(x = "Waiting Time to Mating (mins)", y = "Count") +
ggtitle("Histogram of Waiting Time to Mating in Fed and Starved Crickets")
#boxplot
ggplot(cricket_data, aes(x = feeding, y = time_to_mating)) +
geom_boxplot(fill = "lightblue") +
theme_classic() +
labs(x = "Feeding", y = "Waiting Time to Mating (mins)") +
ggtitle("Boxplot of Waiting Time to Mating ")
# first will be testing normality of non-transformed data
fit_cricket <- lm(time_to_mating~feeding, data = cricket_data)
res_cricket = fit_cricket$residuals
shapiro.test(res_cricket) # p-value =
qqPlot(res_cricket)
# log transforming cricket data
cricket_data$log_time_to_mating <- log(cricket_data$time_to_mating)
View(cricket_data)
# log transforming cricket data
cricket_data$log_time_to_mating <- log(cricket_data$time_to_mating)
ggplot(cricket_data, aes(x = log_time_to_mating)) +
geom_histogram() +
facet_wrap(~ feeding) +
theme_light() +
stat_bin(bins = 20) +
labs(x = "Log Waiting Time to Mating (mins)", y = "Count") +
ggtitle("Histogram of Log Waiting Time to Mating of Fed and Starved Crickets")
shapiro.test(cricket_data$log_time_to_mating)
# log transforming cricket data
cricket_data$log_time_to_mating <- log(cricket_data$time_to_mating)
ggplot(cricket_data, aes(x = log_time_to_mating)) +
geom_histogram() +
facet_wrap(~ feeding) +
theme_light() +
stat_bin(bins = 20) +
labs(x = "Log Waiting Time to Mating (mins)", y = "Count") +
ggtitle("Histogram of Log Waiting Time to Mating of Fed and Starved Crickets")
shapiro.test(cricket_data$log_time_to_mating)
# log transforming cricket data
cricket_data$log_time_to_mating <- log(cricket_data$time_to_mating)
#visualize log data
ggplot(cricket_data, aes(x = log_time_to_mating)) +
geom_histogram() +
facet_wrap(~ feeding) +
theme_light() +
stat_bin(bins = 20) +
labs(x = "Log Waiting Time to Mating (mins)", y = "Count") +
ggtitle("Histogram of Log Waiting Time to Mating of Fed and Starved Crickets")
#test normality of log data
fit_log_cricket <- lm(log_time_to_mating~feeding, data = cricket_data)
res_log_cricket = fit_log_cricket$residuals
shapiro.test(res_log_cricket) # p-value = 3.647e-08
qqPlot(res_log_cricket)
# sqrt transform cricket data
cricket_data$sqrt_time_to_mating <- sqrt(cricket_data$time_to_mating)
# sqrt transform cricket data
cricket_data$sqrt_time_to_mating <- sqrt(cricket_data$time_to_mating)
#visualize sqrt data
ggplot(cricket_data, aes(x = sqrt_time_to_mating)) +
geom_histogram() +
facet_wrap(~ feeding) +
theme_light() +
stat_bin(bins = 20) +
labs(x = "Square Root Waiting Time to Mating (mins)", y = "Count") +
ggtitle("Histogram of Square Root Waiting Time to Mating of Fed and Starved Crickets")
# sqrt transform cricket data
cricket_data$sqrt_time_to_mating <- sqrt(cricket_data$time_to_mating)
#visualize sqrt data
ggplot(cricket_data, aes(x = sqrt_time_to_mating)) +
geom_histogram() +
facet_wrap(~ feeding) +
theme_light() +
stat_bin(bins = 20) +
labs(x = "Square Root Waiting Time to Mating (mins)", y = "Count") +
ggtitle("Histogram of Square Root Waiting Time to Mating of Fed and Starved Crickets")
#test normality of sqrt data
fit_sqrt_cricket <- lm(sqrt_time_to_mating~feeding, data = cricket_data)
res_sqrt_cricket = fit_sqrt_cricket$residuals
shapiro.test(res_sqrt_cricket) # p-value = 3.647e-08
qqPlot(res_sqrt_cricket)
# sqrt transform cricket data
cricket_data$sqrt_time_to_mating <- sqrt(cricket_data$time_to_mating)
#visualize sqrt data
ggplot(cricket_data, aes(x = sqrt_time_to_mating)) +
geom_histogram() +
facet_wrap(~ feeding) +
theme_light() +
stat_bin(bins = 25) +
labs(x = "Square Root Waiting Time to Mating (mins)", y = "Count") +
ggtitle("Histogram of Square Root Waiting Time to Mating of Fed and Starved Crickets")
#test normality of sqrt data
fit_sqrt_cricket <- lm(sqrt_time_to_mating~feeding, data = cricket_data)
res_sqrt_cricket = fit_sqrt_cricket$residuals
shapiro.test(res_sqrt_cricket) # p-value = 3.647e-08
qqPlot(res_sqrt_cricket)
qqPlot(res_sqrt_cricket)
shapiro.test(res_sqrt_cricket) # p-value = 3.647e-08
# first will be testing normality of non-transformed data
fit_cricket <- lm(time_to_mating~feeding, data = cricket_data)
res_cricket = fit_cricket$residuals
shapiro.test(res_cricket) # p-value = 0.03308
qqPlot(res_cricket)
# sqrt transform cricket data
cricket_data$sqrt_time_to_mating <- sqrt(cricket_data$time_to_mating)
#visualize sqrt data
ggplot(cricket_data, aes(x = sqrt_time_to_mating)) +
geom_histogram() +
facet_wrap(~ feeding) +
theme_light() +
stat_bin(bins = 25) +
labs(x = "Square Root Waiting Time to Mating (mins)", y = "Count") +
ggtitle("Histogram of Square Root Waiting Time to Mating of Fed and Starved Crickets")
#test normality of sqrt data
fit_sqrt_cricket <- lm(sqrt_time_to_mating~feeding, data = cricket_data)
res_sqrt_cricket = fit_sqrt_cricket$residuals
shapiro.test(res_sqrt_cricket) # p-value = 3.647e-08
qqPlot(res_sqrt_cricket)
View(cricket_data)
# levene test for sqrt cricket data
leveneTest(cricket_data$sqrt_time_to_mating, cricket_data$feeding) #p-value =
# levene test for plant data
leveneTest(sub_plant_data$log_num_leaves_in_rosette, sub_plant_data$dist_from_edge_m) #p-value = 0.04464
# two sample t-test
dist_from_edge_0m <- subset(sub_plant_data, dist_from_edge_m == "0.0m")
dist_from_edge_6m <- subset(sub_plant_data, dist_from_edge_m == "6.0m")
t.test(dist_from_edge_0m$log_num_leaves_in_rosette, dist_from_edge_6m$log_num_leaves_in_rosette, var.equal = FALSE) # p-value = 0.02555
# null = there is no difference in number of dandelion leaves per rosette between dandelion 0m from habitat edge and 6m from habitat edge
# alt = there is a difference
# levene test for sqrt cricket data
leveneTest(cricket_data$sqrt_time_to_mating, cricket_data$feeding) #p-value = 0.03302
View(cricket_data)
# two sample t-test
feeding_fed <- subset(cricket_data, feeding == "fed")
feeding_starved <- subset(cricket_data, feeding == "starved")
t.test(feeding_fed$sqrt_time_to_mating, feeding_starved$sqrt_time_to_mating, var.equal = FALSE) # p-value =
# levene test for cricket data
leveneTest(cricket_data$time_to_mating, cricket_data$feeding) #p-value = 0.03302
# two sample t-test
dist_from_edge_0m <- subset(sub_plant_data, dist_from_edge_m == "0.0m")
dist_from_edge_6m <- subset(sub_plant_data, dist_from_edge_m == "6.0m")
t.test(dist_from_edge_0m$log_num_leaves_in_rosette, dist_from_edge_6m$log_num_leaves_in_rosette, var.equal = FALSE) # p-value = 0.02555
# two sample t-test
feeding_fed <- subset(cricket_data, feeding == "fed")
feeding_starved <- subset(cricket_data, feeding == "starved")
t.test(feeding_fed$sqrt_time_to_mating, feeding_starved$sqrt_time_to_mating, var.equal = FALSE) # p-value = 0.2055
library(latexpdf)
# levene test for sqrt cricket data
leveneTest(cricket_data$sqrt_time_to_mating, cricket_data$feeding) #p-value = 0.03302
install.packages(pdfcrop)
output:
pdf_document:
latex_engine: xelatex
knitr::opts_chunk$set(echo = TRUE)
library(dbplyr)
library(ggplot2)
library(car)
library(tidyverse)
library(readr)
knitr::opts_chunk$set(echo = TRUE)
library(dbplyr)
library(ggplot2)
library(car)
library(tidyverse)
library(readr)
# modifying data
plantdata <- read.csv("~/EEMB 146 Lab Files/Lab 5 Data/plant_data.csv")
sub_plant_data <- plantdata[plantdata$dist_from_edge_m != "3.0m",]
levels(sub_plant_data$dist_from_edge_m)
# visualizing data --histogram
ggplot(sub_plant_data, aes(x = num_leaves_in_rosette)) +  #histogram
geom_histogram() +
facet_wrap(~ dist_from_edge_m) +  #separates histogram based on a certain grouping
theme_light() +
stat_bin(bins = 30) +
labs(x = "Number of Dandelion Leaves", y = "Count") +
ggtitle("Histogram of Number of Leaves in Rosette at 0.0m and 6.0m")
#boxplot
ggplot(sub_plant_data, aes(x = dist_from_edge_m, y = num_leaves_in_rosette)) +
geom_boxplot(fill = "lightblue") +
theme_classic() +
labs(x = "Distance From Edge (m)", y = "Number of Dandelion Leaves") +
ggtitle("Boxplot of Number of Leaves in Rosette at 0.0m and 6.0m")
# modifying data
plantdata <- read.csv("~/EEMB 146 Lab Files/Lab 5 Data/plant_data.csv")
sub_plant_data <- plantdata[plantdata$dist_from_edge_m != "3.0m",]
levels(sub_plant_data$dist_from_edge_m)
# visualizing data --histogram
ggplot(sub_plant_data, aes(x = num_leaves_in_rosette)) +  #histogram
geom_histogram() +
facet_wrap(~ dist_from_edge_m) +  #separates histogram based on a certain grouping
theme_light() +
stat_bin(bins = 30) +
labs(x = "Number of Dandelion Leaves", y = "Count") +
ggtitle("Histogram of Number of Leaves in Rosette at 0.0m and 6.0m")
#boxplot
ggplot(sub_plant_data, aes(x = dist_from_edge_m, y = num_leaves_in_rosette)) +
geom_boxplot(fill = "lightblue") +
theme_classic() +
labs(x = "Distance From Edge (m)", y = "Number of Dandelion Leaves") +
ggtitle("Boxplot of Number of Leaves in Rosette at 0.0m and 6.0m")
# modifying data
plantdata <- read.csv("~/EEMB 146 Lab Files/Lab 5 Data/plant_data.csv")
sub_plant_data <- plantdata[plantdata$dist_from_edge_m != "3.0m",]
levels(sub_plant_data$dist_from_edge_m)
# visualizing data --histogram
ggplot(sub_plant_data, aes(x = num_leaves_in_rosette)) +  #histogram
geom_histogram() +
facet_wrap(~ dist_from_edge_m) +  #separates histogram based on a certain grouping
theme_light() +
stat_bin(bins = 30) +
labs(x = "Number of Dandelion Leaves", y = "Count") +
ggtitle("Histogram of Number of Leaves in Rosette at 0.0m and 6.0m")
#boxplot
ggplot(sub_plant_data, aes(x = dist_from_edge_m, y = num_leaves_in_rosette)) +
geom_boxplot(fill = "lightblue") +
theme_classic() +
labs(x = "Distance From Edge (m)", y = "Number of Dandelion Leaves") +
ggtitle("Boxplot of Number of Leaves in Rosette at 0.0m and 6.0m")
knitr::opts_chunk$set(echo = TRUE)
library(dbplyr)
library(ggplot2)
library(car)
library(tidyverse)
library(readr)
# levene test for plant data
leveneTest(sub_plant_data$log_num_leaves_in_rosette, sub_plant_data$dist_from_edge_m)
knitr::opts_chunk$set(echo = TRUE)
library(dbplyr)
library(ggplot2)
library(car)
library(tidyverse)
library(readr)
# modifying data
plantdata <- read.csv("~/EEMB 146 Lab Files/Lab 5 Data/plant_data.csv")
sub_plant_data <- plantdata[plantdata$dist_from_edge_m != "3.0m",]
levels(sub_plant_data$dist_from_edge_m)
# visualizing data --histogram
ggplot(sub_plant_data, aes(x = num_leaves_in_rosette)) +  #histogram
geom_histogram() +
facet_wrap(~ dist_from_edge_m) +  #separates histogram based on a certain grouping
theme_light() +
stat_bin(bins = 30) +
labs(x = "Number of Dandelion Leaves", y = "Count") +
ggtitle("Histogram of Number of Leaves in Rosette at 0.0m and 6.0m")
#boxplot
ggplot(sub_plant_data, aes(x = dist_from_edge_m, y = num_leaves_in_rosette)) +
geom_boxplot(fill = "lightblue") +
theme_classic() +
labs(x = "Distance From Edge (m)", y = "Number of Dandelion Leaves") +
ggtitle("Boxplot of Number of Leaves in Rosette at 0.0m and 6.0m")
# checking normality of data through residuals
fit_plant <- lm(num_leaves_in_rosette~dist_from_edge_m, data = sub_plant_data)
res_plant = fit_plant$residuals
shapiro.test(res_plant)
# p-value = 3.647e-08
qqPlot(res_plant)
# log transform data
sub_plant_data$log_num_leaves_in_rosette <- log(sub_plant_data$num_leaves_in_rosette + 1)
ggplot(sub_plant_data, aes(x = log_num_leaves_in_rosette)) +
geom_histogram() +
facet_wrap(~ dist_from_edge_m) +
theme_light() +
stat_bin(bins = 30) +
labs(x = "Log Number of Dandelion Leaves", y = "Count") +
ggtitle("Histogram of Log Number of Leaves in Rosette at 0.0m and 6.0m")
#Both histograms look normal
# residuals of log plant data
fit_log_plant <- lm(log_num_leaves_in_rosette~dist_from_edge_m, data = sub_plant_data)
res_log_plant = fit_log_plant$residuals
shapiro.test(res_log_plant) # p-value = 0.798
qqPlot(res_log_plant)
# levene test for plant data
leveneTest(sub_plant_data$log_num_leaves_in_rosette, sub_plant_data$dist_from_edge_m)
# p-value = 0.04464
install(latex2exp)
install.packages(latex2exp)
library(latexpdf)
knitr::opts_chunk$set(echo = TRUE)
library(dbplyr)
library(ggplot2)
library(car)
library(tidyverse)
library(readr)
library(latexpdf)
# modifying data
plantdata <- read.csv("~/EEMB 146 Lab Files/Lab 5 Data/plant_data.csv")
sub_plant_data <- plantdata[plantdata$dist_from_edge_m != "3.0m",]
levels(sub_plant_data$dist_from_edge_m)
# visualizing data --histogram
ggplot(sub_plant_data, aes(x = num_leaves_in_rosette)) +  #histogram
geom_histogram() +
facet_wrap(~ dist_from_edge_m) +  #separates histogram based on a certain grouping
theme_light() +
stat_bin(bins = 30) +
labs(x = "Number of Dandelion Leaves", y = "Count") +
ggtitle("Histogram of Number of Leaves in Rosette at 0.0m and 6.0m")
#boxplot
ggplot(sub_plant_data, aes(x = dist_from_edge_m, y = num_leaves_in_rosette)) +
geom_boxplot(fill = "lightblue") +
theme_classic() +
labs(x = "Distance From Edge (m)", y = "Number of Dandelion Leaves") +
ggtitle("Boxplot of Number of Leaves in Rosette at 0.0m and 6.0m")
knitr::opts_chunk$set(echo = TRUE)
library(dbplyr)
library(ggplot2)
library(car)
library(tidyverse)
library(readr)
library(latexpdf)
# modifying data
plantdata <- read.csv("~/EEMB 146 Lab Files/Lab 5 Data/plant_data.csv")
sub_plant_data <- plantdata[plantdata$dist_from_edge_m != "3.0m",]
levels(sub_plant_data$dist_from_edge_m)
# visualizing data --histogram
ggplot(sub_plant_data, aes(x = num_leaves_in_rosette)) +  #histogram
geom_histogram() +
facet_wrap(~ dist_from_edge_m) +  #separates histogram based on a certain grouping
theme_light() +
stat_bin(bins = 30) +
labs(x = "Number of Dandelion Leaves", y = "Count") +
ggtitle("Histogram of Number of Leaves in Rosette at 0.0m and 6.0m")
#boxplot
ggplot(sub_plant_data, aes(x = dist_from_edge_m, y = num_leaves_in_rosette)) +
geom_boxplot(fill = "lightblue") +
theme_classic() +
labs(x = "Distance From Edge (m)", y = "Number of Dandelion Leaves") +
ggtitle("Boxplot of Number of Leaves in Rosette at 0.0m and 6.0m")
# checking normality of data through residuals
fit_plant <- lm(num_leaves_in_rosette~dist_from_edge_m, data = sub_plant_data)
res_plant = fit_plant$residuals
shapiro.test(res_plant)
# p-value = 3.647e-08
qqPlot(res_plant)
# log transform data
sub_plant_data$log_num_leaves_in_rosette <- log(sub_plant_data$num_leaves_in_rosette + 1)
ggplot(sub_plant_data, aes(x = log_num_leaves_in_rosette)) +
geom_histogram() +
facet_wrap(~ dist_from_edge_m) +
theme_light() +
stat_bin(bins = 30) +
labs(x = "Log Number of Dandelion Leaves", y = "Count") +
ggtitle("Histogram of Log Number of Leaves in Rosette at 0.0m and 6.0m")
#Both histograms look normal
# residuals of log plant data
fit_log_plant <- lm(log_num_leaves_in_rosette~dist_from_edge_m, data = sub_plant_data)
res_log_plant = fit_log_plant$residuals
shapiro.test(res_log_plant) # p-value = 0.798
qqPlot(res_log_plant)
# levene test for plant data
leveneTest(sub_plant_data$log_num_leaves_in_rosette, sub_plant_data$dist_from_edge_m)
# p-value = 0.04464
# two sample t-test
dist_from_edge_0m <- subset(sub_plant_data, dist_from_edge_m == "0.0m")
dist_from_edge_6m <- subset(sub_plant_data, dist_from_edge_m == "6.0m")
t.test(dist_from_edge_0m$log_num_leaves_in_rosette, dist_from_edge_6m$log_num_leaves_in_rosette, var.equal = FALSE) # p-value = 0.02555
#loading in cricket data
cricket_data <- read.csv("~/EEMB 146 Lab Files/Lab 5 Data/starving_cricket.csv")
# visualizing data --histogram
ggplot(cricket_data, aes(x = time_to_mating)) +
geom_histogram() +
facet_wrap(~ feeding) +  #separates histogram based on a certain grouping
theme_light() +
stat_bin(bins = 20) +
labs(x = "Waiting Time to Mating (mins)", y = "Count") +
ggtitle("Histogram of Waiting Time to Mating in Fed and Starved Crickets")
#boxplot
ggplot(cricket_data, aes(x = feeding, y = time_to_mating)) +
geom_boxplot(fill = "lightblue") +
theme_classic() +
labs(x = "Feeding", y = "Waiting Time to Mating (mins)") +
ggtitle("Boxplot of Waiting Time to Mating ")
# first will be testing normality of non-transformed data
fit_cricket <- lm(time_to_mating~feeding, data = cricket_data)
res_cricket = fit_cricket$residuals
shapiro.test(res_cricket)
# p-value = 0.03308
qqPlot(res_cricket)
# sqrt transform cricket data
cricket_data$sqrt_time_to_mating <- sqrt(cricket_data$time_to_mating)
#visualize sqrt data
ggplot(cricket_data, aes(x = sqrt_time_to_mating)) +
geom_histogram() +
facet_wrap(~ feeding) +
theme_light() +
stat_bin(bins = 25) +
labs(x = "Square Root Waiting Time to Mating (mins)", y = "Count") +
ggtitle("Histogram of Square Root Waiting Time to Mating of Fed and Starved Crickets")
#test normality of sqrt data
fit_sqrt_cricket <- lm(sqrt_time_to_mating~feeding, data = cricket_data)
res_sqrt_cricket = fit_sqrt_cricket$residuals
shapiro.test(res_sqrt_cricket)
# p-value = 0.2968
qqPlot(res_sqrt_cricket)
# levene test for sqrt cricket data
leveneTest(cricket_data$sqrt_time_to_mating, cricket_data$feeding)
# p-value = 0.03302
